#!/bin/bash

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

PROGNAME=`basename $0`
VERSION="Version 0.3"
AUTHOR="2012, Jon Bevan (https://github.com/jdbevan)"

print_version() {
    echo "$VERSION, $AUTHOR"
}

print_help() {
    print_version $PROGNAME $VERSION
    echo ""
    echo "Description:"
    echo "$PROGNAME is a Nagios plugin to monitor the output of "
    echo "vmstat(8) on a server. It returns a list of mean values for all"
    echo "the metrics provided by vmstat based on a number of updates of"
    echo "vmstat a restricted set of metrics are specified using the arguments"
    echo "below. Warning and critical figures can be provided for each group"
    echo "of metrics."
    echo ""
    echo "Example calls:"
    echo "./$PROGNAME -P -C -Y --delay 1 --count 20"
    echo "./$PROGNAME --output memory,swap,io -d 3"
    echo "./$PROGNAME --cpu 50 80 -o cpu -d 1 -c 10"
    echo ""
    echo "Options:"
    echo "  -P|--procs [warning_value] [critical_value]"
    echo "    Display the procs figures."
    echo "  -M|--memory [warning_value] [critical_value]"
    echo "    Display the memory figures."
    echo "  -W|--swap [warning_value] [critical_value]"
    echo "    Display the swap figures."
    echo "  -I|--io [warning_value] [critical_value]"
    echo "    Display the I/O figures."
    echo "  -Y|--system [warning_value] [critical_value]"
    echo "    Display the system figures."
    echo "  -C|--cpu [warning_value] [critical_value]"
    echo "    Display the cpu figures. Warning and critical values are not"
    echo "    compared against the CPU idle value."
    echo ""
    echo "  -d|--delay)"
    echo "    The delay in seconds between vmstat updates in seconds. If not "
    echo "    provided then the figures returned are the averages since system"
    echo "    boot."
    echo "  -c|--count)"
    echo "    The number of vmstat updates. Ignored if delay is not specified."
    echo "    Default value is 5."
    echo "  -o|--output)"
    echo "    Comma separated string specifying the data output from: procs,"
    echo "    memory, swap, io, system, cpu, all."
    echo "    Added to options -P -M -W -I -Y and -C. Default: all."
    echo ""
	# Need flags for specifying critical levels...    
    exit $ST_UK
}

# Exit status codes
ST_OK=0
ST_WR=1
ST_CR=2
ST_UK=3

# Array keys for output
#MEMORY_INACT MEMORY_ACTIVE CPU_ST
data_columns=(PROCS_R PROCS_B MEMORY_SWPD MEMORY_FREE MEMORY_BUFF MEMORY_CACHE SWAP_SI SWAP_SO IO_BI IO_BO SYSTEM_IN SYSTEM_CS CPU_US CPU_SY CPU_ID CPU_WA)

PROCS_WC=0
MEMORY_WC=1
SWAP_WC=2
IO_WC=3
SYSTEM_WC=4
CPU_WC=5

# Array to hold averages
declare -a averages
# Arrays to hold warning and critical values
declare -a warnings
declare -a criticals

STATUS="OK"
delay=""
count=5
output=""
vmstat_lines_processed=0

arg_shft=0

# argument parsing functions
store_warning_critical_values() {
	arg_shft=0
	if [[ $2 =~ ^[0-9.]+$ ]]; then
		warnings[$1]=$2
		arg_shft=1
		if [[ $3 =~ ^[0-9.]+$ ]]; then
			criticals[$1]=$3
			arg_shft=2
		fi
	fi
}


# Process arguments
while test -n "$1"; do
    case "$1" in
        --help|-h)
            print_help
            exit $ST_UK
            ;;
        --version|-v)
            print_version $PROGNAME $VERSION
            exit $ST_UK
            ;;
        --delay|-d)
            delay=$2
            shift
            ;;
        --count|-c)
            count=$2
            shift
            ;;
        --output|-o)
            output=$2
            shift
            ;;
        --procs|-P)
            output="procs,$output"
            store_warning_critical_values $PROCS_WC $2 $3
            shift $arg_shft
            ;;
        --memory|-M)
            output="memory,$output"
            store_warning_critical_values $MEMORY_WC $2 $3
            shift $arg_shft
            ;;
        --swap|-W)
            output="swap,$output"
            store_warning_critical_values $SWAP_WC $2 $3
            shift $arg_shft
            ;;
        --io|-I)
            output="io,$output"
            store_warning_critical_values $IO_WC $2 $3
            shift $arg_shft
            ;;
        --system|-Y)
            output="system,$output"
            store_warning_critical_values $SYSTEM_WC $2 $3
            shift $arg_shft
            ;;
        --cpu|-C)
            output="cpu,$output"
            store_warning_critical_values $CPU_WC $2 $3
            shift $arg_shft
            ;;
        *)
            echo "Unknown argument: $1"
            print_help
            exit $ST_UK
            ;;
    esac
    shift
done

# check functions
check_vmstat_exists() {
	if ! command -v vmstat &>/dev/null
	then
		echo "Can't find vmstat(8)!"
		exit $ST_UK
	fi
}

check_count_delay_values() {
	# If no delay specified
	if [ -z "$delay" ]
	then
		count=""
	# If delay < 1
	elif [ "$delay" -lt "1" ]
	then
		echo "Please provide a positive delay!"
		exit $ST_UK
	# If delay given but no count
	elif [ -z "$count" ]
	then
		echo "Please provide a count!"
		exit $ST_UK
	# If count specified
	elif [ -n "$count" ]
	then
		# Check it's not < 1
		if [ "$count" -lt "1" ]
		then
			echo "Please provide a positive count!"
			exit $ST_UK
		fi
	fi
	
}

# get functions
get_values() {
	# See link for splitting data into array
	# http://stackoverflow.com/questions/10586153/bash-split-string-into-array

	# See link for alternative to piping vmstat into while loop
	# http://stackoverflow.com/questions/124167/bash-variable-scope
	
	# And multi-line command output parsing
	# http://mywiki.wooledge.org/BashFAQ/001

	while read -r line; do
		if [[ "$line" =~ ^[0-9\ ]+$ ]]
		then

			# Split string into array
			# Increment lines_processed
			# Loop through array and calculate continuous average to be
			# stored in averages variable: 
			# (current_val*(lines_processed-1))+new_data / lines_processed

			vmstat_lines_processed=$((vmstat_lines_processed+1))
			IFS=' '
			read -a values <<< "$line"
	
			for index in "${!values[@]}"
			do
				if [ $vmstat_lines_processed -eq 1 ]
				then
					averages[${index}]=${values[index]}
				else
					new_total=`echo "scale=2; (${averages[index]} * ($vmstat_lines_processed - 1) + ${values[index]}) / $vmstat_lines_processed" | bc -l`
					averages[${index}]=$new_total
				fi
			done
		fi
	done < <(vmstat -n $delay $count)

}

set_status() {
	# Floating point comparison from:
	# http://stackoverflow.com/questions/2424770/floating-point-comparison-in-shell-script
	
	if [ "$STATUS" != "Critical" ]; then
	
		if [[ $(bc <<< "$1 >= $2") -eq 1 ]]; then
			# Warning
			if [ "$STATUS" == "OK" ]; then
				STATUS="Warning"
			fi
		fi
		
		if [[ $(bc <<< "$1 >= $3") -eq 1 ]]; then
			# Critical
			if [ "$STATUS" == "Warning" ]; then
				STATUS="Critical"
			fi
		fi
	fi
}

make_human_output() {
	HUMAN_OUT="Averages:"
	for index in "${!data_columns[@]}"
	do
		case "${data_columns[index]}" in
		    PROCS_R|PROCS_B)
		    	if [[ "$output" == "all" || "$output" =~ "procs" ]] ; then
					HUMAN_OUT="${HUMAN_OUT} ${averages[index]}"
					set_status ${averages[index]} ${warnings[PROC_WC]} ${criticals[PROC_WC]}
		    	fi
		        ;;
		    MEMORY_SWPD|MEMORY_FREE|MEMORY_BUFF|MEMORY_CACHE)
		    	if [[ "$output" == "all" || "$output" =~ "memory" ]] ; then
					HUMAN_OUT="${HUMAN_OUT} ${averages[index]}b"
					set_status ${averages[index]} ${warnings[MEMORY_WC]} ${criticals[MEMORY_WC]}
		    	fi
		        ;;
		    SWAP_SI|SWAP_SO)
		    	if [[ "$output" == "all" || "$output" =~ "swap" ]] ; then
					HUMAN_OUT="${HUMAN_OUT} ${averages[index]}b/s"
					set_status ${averages[index]} ${warnings[SWAP_WC]} ${criticals[SWAP_WC]}
		    	fi
		        ;;
		    IO_BI|IO_BO)
		    	if [[ "$output" == "all" || "$output" =~ "io" ]] ; then
					HUMAN_OUT="${HUMAN_OUT} ${averages[index]}blocks/s"
					set_status ${averages[index]} ${warnings[IO_WC]} ${criticals[IO_WC]}
		    	fi
		        ;;
		    SYSTEM_IN|SYSTEM_CS)
		    	if [[ "$output" == "all" || "$output" =~ "system" ]] ; then
					HUMAN_OUT="${HUMAN_OUT} ${averages[index]}/s"
					set_status ${averages[index]} ${warnings[SYSTEM_WC]} ${criticals[SYSTEM_WC]}
		    	fi
		        ;;
		    CPU_US|CPU_SY|CPU_ID|CPU_WA)
		    	if [[ "$output" == "all" || "$output" =~ "cpu" ]] ; then
					HUMAN_OUT="${HUMAN_OUT} ${averages[index]}%"
					
					if [ "${data_columns[index]}" != "CPU_ID" ]; then
						set_status ${averages[index]} ${warnings[CPU_WC]} ${criticals[CPU_WC]}
					fi
		    	fi
		        ;;
		esac
	done
	HUMAN_OUT="$STATUS - $HUMAN_OUT"
}

make_perfdata() {
	PERFDATA=""
	
	# Loop through possible columns	
	for index in "${!data_columns[@]}"
	do
		case "${data_columns[index]}" in
		    PROCS_R|PROCS_B)
		    	if [[ "$output" == "all" || "$output" =~ "procs" ]] ; then
					PERFDATA="${PERFDATA}${data_columns[index]}=${averages[index]} "
		    	fi
		        ;;
		    MEMORY_SWPD|MEMORY_FREE|MEMORY_BUFF|MEMORY_CACHE)
		    	if [[ "$output" == "all" || "$output" =~ "memory" ]] ; then
					PERFDATA="${PERFDATA}${data_columns[index]}=${averages[index]} "
		    	fi
		        ;;
		    SWAP_SI|SWAP_SO)
		    	if [[ "$output" == "all" || "$output" =~ "swap" ]] ; then
					PERFDATA="${PERFDATA}${data_columns[index]}=${averages[index]} "
		    	fi
		        ;;
		    IO_BI|IO_BO)
		    	if [[ "$output" == "all" || "$output" =~ "io" ]] ; then
					PERFDATA="${PERFDATA}${data_columns[index]}=${averages[index]} "
		    	fi
		        ;;
		    SYSTEM_IN|SYSTEM_CS)
		    	if [[ "$output" == "all" || "$output" =~ "system" ]] ; then
					PERFDATA="${PERFDATA}${data_columns[index]}=${averages[index]} "
		    	fi
		        ;;
		    CPU_US|CPU_SY|CPU_ID|CPU_WA)
		    	if [[ "$output" == "all" || "$output" =~ "cpu" ]] ; then
					PERFDATA="${PERFDATA}${data_columns[index]}=${averages[index]} "
		    	fi
		        ;;
		esac
	done
}

check_values() {
	if [ -z "$output" ]
	then
		output="all"
	fi
	RTNVAL=$ST_OK
}

print_output() {
	echo "$HUMAN_OUT | $PERFDATA"
	exit $RTNVAL
}

# Run the program!
check_vmstat_exists
check_count_delay_values
get_values
check_values
make_human_output
make_perfdata
print_output
